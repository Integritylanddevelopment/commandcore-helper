# agents/ticket_router.py

"""
Agent Name: ticket_router
Role: support
Version: 1.0.0
Description: Auto-routes incoming tickets to the correct department based on content.
"""

import json
from agents.agent_core import BaseAgent
from core.scheduler import schedule_task
from core.messaging import handle_message
from core.webhooks import register_webhook
from core.training import register_training_example
from core.upgrader import inject
from registry.agent_registry import register_agent
from utils.ticket_sorter import run_logic

# Agent Metadata
agent_name = "ticket_router"
agent_description = "Auto-routes incoming tickets to the correct department based on content."
agent_role = "support"
agent_version = "1.0.0"

# Input Schema
expected_input = {
    "ticket": "I need help updating my billing info"
}
# Output Schema
output_format = {
    "department": "Finance",
    "tag": "billing"
}

class TicketRouter(BaseAgent):
    def __init__(self):
        super().__init__(
            name=agent_name,
            description=agent_description,
            role=agent_role,
            version=agent_version,
            input_schema=expected_input,
            output_schema=output_format
        )

    def run(self, context):
        try:
            result = run_logic(context)
            self.log("Task completed.")
            return result
        except Exception as e:
            self.error(f"Execution failed: {str(e)}")
            return {"error": str(e)}            

    def auto_schedule(self):
        schedule_task(agent_name, self.run, day_of_week="fri", hour=7)

    def message_hooks(self, message_data):
        if "ticket" in message_data.get("intent", ""):
            return self.run(message_data.get("context", {}))
        return {"status": "ignored"}

    def webhook_handler(self, payload):
        context = payload.get("ticket_context", {})
        return self.run(context)

    def training_data(self):
        examples = [
            {
                "input": {"ticket": "I need help updating my billing info"},
                "output": {"department": "Finance", "tag": "billing"}
            }
        ]
        for example in examples:
            register_training_example(agent_name, example["input"], example["output"])

# Register
register_agent(TicketRouter)

# Dev stub
if __name__ == "__main__":
    bot = inject(TicketRouter())
    result = bot.run({"ticket": "I need help updating my billing info"})
    print(json.dumps(result, indent=2))
