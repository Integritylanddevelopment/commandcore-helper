# agents/ad_copy_bot.py

"""
Agent Name: ad_copy_bot
Role: Marketing Copywriter
Version: 1.0.0
Description: Writes persuasive, A/B-testable ad copy based on product features, brand tone, and target audience psychographics.
"""

import json
from agents.agent_core import BaseAgent
from core.scheduler import schedule_task
from core.messaging import handle_message
from core.webhooks import register_webhook
from core.training import register_training_example
from registry.agent_registry import register_agent
from utils.copy_generator import generate_ad_copy  # Hypothetical utility function

# Agent Metadata
agent_name = "ad_copy_bot"
agent_description = "Writes high-conversion ad copy for landing pages, ads, and banners."
agent_role = "marketing"
agent_version = "1.0.0"

# Input Schema
expected_input = {
    "product_name": "string",
    "audience_profile": "string",
    "core_features": ["string"],
    "brand_tone": "string",              # 'funny', 'trustworthy', 'luxury'
    "platform": "string"                 # 'Facebook', 'Google Ads', 'Email'
}

# Output Schema
output_format = {
    "headline": "string",
    "body": "string",
    "cta": "string"
}

# Agent Logic
class AdCopyBot(BaseAgent):
    def __init__(self):
        super().__init__(
            name=agent_name,
            description=agent_description,
            role=agent_role,
            version=agent_version,
            input_schema=expected_input,
            output_schema=output_format
        )

    def run(self, context):
        try:
            copy = generate_ad_copy(context)
            self.log("Ad copy generated successfully.")
            return copy
        except Exception as e:
            self.error(f"Ad copy generation failed: {str(e)}")
            return {"error": str(e)}

    def auto_schedule(self):
        schedule_task(agent_name, self.run, day_of_week="wed", hour=11)

    def message_hooks(self, message_data):
        if "ad copy" in message_data.get("intent", ""):
            return self.run(message_data.get("context", {}))
        return {"status": "ignored"}

    def webhook_handler(self, payload):
        copy_data = payload.get("copy_context", {})
        return self.run(copy_data)

    def training_data(self):
        examples = [
            {
                "input": {
                    "product_name": "TogetherWe App",
                    "audience_profile": "young couples, 25-35, emotionally aware",
                    "core_features": ["Daily relationship coaching", "AI-powered therapist", "Secure messaging"],
                    "brand_tone": "intimate",
                    "platform": "Instagram"
                },
                "output": {
                    "headline": "Reconnect in Just 10 Minutes a Day",
                    "body": "Fall in love again with bite-sized AI-guided conversations. No judgment, just intimacy.",
                    "cta": "Try TogetherWe Free"
                }
            }
        ]
        for example in examples:
            register_training_example(agent_name, example["input"], example["output"])

# Register the agent
register_agent(AdCopyBot)

# Dev Test Stub
if __name__ == "__main__":
    test_input = {
        "product_name": "TogetherWe App",
        "audience_profile": "young couples",
        "core_features": ["relationship prompts", "AI coach", "private chat"],
        "brand_tone": "warm",
        "platform": "Meta Ads"
    }

    bot = AdCopyBot()
    result = bot.run(test_input)
    print(json.dumps(result, indent=2))
